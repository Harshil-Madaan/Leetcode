class Solution {
    public boolean check(int[] nums) {
        // Initialize a counter to track the number of "breaks" in sorted order.
        int count = 0;

        // Check if the first element is less than the last element.
        // If this is true, it indicates a possible "break" in rotation.
        if (nums[0] < nums[nums.length - 1]) {
            count++;
        }

        // Loop through the array to check for breaks in the non-decreasing order.
        for (int i = 0; i < nums.length - 1; i++) {
            // If the current element is greater than the next element,
            // it indicates a "break" in sorted order.
            if (nums[i] > nums[i + 1]) {
                count++;
            }

            // If more than one break is found, the array cannot be a valid
            // rotated sorted array, so return false.
            if (count > 1) {
                return false;
            }
        }

        // If at most one break is found, the array is a valid rotated sorted array.
        return true;
    }
}
